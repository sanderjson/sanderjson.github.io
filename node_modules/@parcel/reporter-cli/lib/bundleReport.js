"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bundleReport;

var _utils = require("@parcel/utils");

var _filesize = _interopRequireDefault(require("filesize"));

var _chalk = _interopRequireDefault(require("chalk"));

var emoji = _interopRequireWildcard(require("./emoji"));

var _render = require("./render");

var _utils2 = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LARGE_BUNDLE_SIZE = 1024 * 1024;
const COLUMNS = [{
  align: 'left'
}, // name
{
  align: 'right'
}, // size
{
  align: 'right'
} // time
];

function bundleReport(bundleGraph) {
  // Get a list of bundles sorted by size
  let {
    bundles
  } = (0, _utils.generateBundleReport)(bundleGraph);
  let rows = [];

  for (let bundle of bundles) {
    // Add a row for the bundle
    rows.push([(0, _utils2.formatFilename)(bundle.filePath || '', _chalk.default.cyan.bold), _chalk.default.bold(prettifySize(bundle.size, bundle.size > LARGE_BUNDLE_SIZE)), _chalk.default.green.bold((0, _utils.prettifyTime)(bundle.time))]);

    for (let asset of bundle.largestAssets) {
      // Add a row for the asset.
      rows.push([(asset == bundle.largestAssets[bundle.largestAssets.length - 1] ? '└── ' : '├── ') + (0, _utils2.formatFilename)(asset.filePath, _chalk.default.reset), _chalk.default.dim(prettifySize(asset.size)), _chalk.default.dim(_chalk.default.green((0, _utils.prettifyTime)(asset.time)))]);
    }

    if (bundle.totalAssets > bundle.largestAssets.length) {
      rows.push(['└── ' + _chalk.default.dim(`+ ${bundle.totalAssets - bundle.largestAssets.length} more assets`)]);
    } // If this isn't the last bundle, add an empty row before the next one


    if (bundle !== bundles[bundles.length - 1]) {
      rows.push([]);
    }
  } // Render table


  (0, _render.writeOut)('');
  (0, _render.table)(COLUMNS, rows);
}

function prettifySize(size, isLarge) {
  let res = (0, _filesize.default)(size);

  if (isLarge) {
    return _chalk.default.yellow(emoji.warning + '  ' + res);
  }

  return _chalk.default.magenta(res);
}