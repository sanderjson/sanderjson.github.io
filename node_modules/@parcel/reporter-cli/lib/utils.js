"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProgressMessage = getProgressMessage;
exports.pad = pad;
exports.formatFilename = formatFilename;
exports.countLines = countLines;

var _path = _interopRequireDefault(require("path"));

var _chalk = _interopRequireDefault(require("chalk"));

var _stringWidth = _interopRequireDefault(require("string-width"));

var _termSize = _interopRequireDefault(require("term-size"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getProgressMessage(event) {
  switch (event.phase) {
    case 'transforming':
      return `Building ${_path.default.basename(event.filePath)}...`;

    case 'bundling':
      return 'Bundling...';

    case 'packaging':
      return `Packaging ${_path.default.basename(event.bundle.filePath || '')}...`;

    case 'optimizing':
      return `Optimizing ${_path.default.basename(event.bundle.filePath || '')}...`;
  }

  return null;
} // Pad a string with spaces on either side


function pad(text, length, align = 'left') {
  let pad = ' '.repeat(length - (0, _stringWidth.default)(text));

  if (align === 'right') {
    return pad + text;
  }

  return text + pad;
}

function formatFilename(filename, color = _chalk.default.reset) {
  let dir = _path.default.relative(process.cwd(), _path.default.dirname(filename));

  return _chalk.default.dim(dir + (dir ? _path.default.sep : '')) + color(_path.default.basename(filename));
}

function countLines(message) {
  let {
    columns
  } = (0, _termSize.default)();
  return (0, _stripAnsi.default)(message).split('\n').reduce((p, line) => p + Math.ceil(((0, _stringWidth.default)(line) || 1) / columns), 0);
}