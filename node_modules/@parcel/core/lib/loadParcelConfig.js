"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadParcelConfig;
exports.resolveParcelConfig = resolveParcelConfig;
exports.create = create;
exports.readAndProcess = readAndProcess;
exports.processConfig = processConfig;
exports.resolveExtends = resolveExtends;
exports.validateConfigFile = validateConfigFile;
exports.validateNotEmpty = validateNotEmpty;
exports.mergeConfigs = mergeConfigs;
exports.mergePipelines = mergePipelines;
exports.mergeMaps = mergeMaps;

var _utils = require("@parcel/utils");

var _json = require("json5");

var _path = _interopRequireDefault(require("path"));

var _assert = _interopRequireDefault(require("assert"));

var _ParcelConfig = _interopRequireDefault(require("./ParcelConfig"));

var _ParcelConfig2 = _interopRequireDefault(require("./ParcelConfig.schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

async function loadParcelConfig(filePath, options) {
  // Resolve plugins from cwd when a config is passed programmatically
  let parcelConfig = options.config ? await create(_objectSpread({}, options.config, {
    resolveFrom: options.inputFS.cwd()
  }), options) : await resolveParcelConfig(filePath, options);

  if (!parcelConfig && options.defaultConfig) {
    parcelConfig = await create(_objectSpread({}, options.defaultConfig, {
      resolveFrom: options.inputFS.cwd()
    }), options);
  }

  if (!parcelConfig) {
    throw new Error('Could not find a .parcelrc');
  }

  return parcelConfig;
}

async function resolveParcelConfig(filePath, options) {
  let configPath = await (0, _utils.resolveConfig)(options.inputFS, filePath, ['.parcelrc']);

  if (!configPath) {
    return null;
  }

  return readAndProcess(configPath, options);
}

function create(config, options) {
  return processConfig(config, config.filePath, options);
}

async function readAndProcess(configPath, options) {
  let config = (0, _json.parse)((await options.inputFS.readFile(configPath)));
  return processConfig(config, configPath, options);
}

async function processConfig(configFile, filePath, options) {
  let resolvedFile = _objectSpread({
    filePath
  }, configFile);

  let config = new _ParcelConfig.default(resolvedFile, options.packageManager);

  let relativePath = _path.default.relative(options.inputFS.cwd(), filePath);

  validateConfigFile(configFile, relativePath);
  let extendedFiles = [];

  if (configFile.extends) {
    let exts = Array.isArray(configFile.extends) ? configFile.extends : [configFile.extends];

    for (let ext of exts) {
      let resolved = await resolveExtends(ext, filePath, options);
      extendedFiles.push(resolved);
      let {
        extendedFiles: moreExtendedFiles,
        config: baseConfig
      } = await readAndProcess(resolved, options);
      extendedFiles = extendedFiles.concat(moreExtendedFiles);
      config = mergeConfigs(baseConfig, resolvedFile);
    }
  }

  return {
    config,
    extendedFiles
  };
}

async function resolveExtends(ext, configPath, options) {
  if (ext.startsWith('.')) {
    return _path.default.resolve(_path.default.dirname(configPath), ext);
  } else {
    let {
      resolved
    } = await (0, _utils.resolve)(options.inputFS, ext, {
      basedir: _path.default.dirname(configPath),
      extensions: ['.json']
    });
    return options.inputFS.realpath(resolved);
  }
}

function validateConfigFile(config, relativePath) {
  validateNotEmpty(config, relativePath);

  _utils.validateSchema.diagnostic(_ParcelConfig2.default, config, relativePath, JSON.stringify(config, null, '\t'), '@parcel/core', '', 'Invalid Parcel Config');
}

function validateNotEmpty(config, relativePath) {
  _assert.default.notDeepStrictEqual(config, {}, `${relativePath} can't be empty`);
}

function mergeConfigs(base, ext) {
  return new _ParcelConfig.default({
    filePath: ext.filePath,
    // TODO: revisit this - it should resolve plugins based on the actual config they are defined in
    resolvers: mergePipelines(base.resolvers, ext.resolvers),
    transforms: mergeMaps(base.transforms, ext.transforms, mergePipelines),
    validators: mergeMaps(base.validators, ext.validators, mergePipelines),
    bundler: ext.bundler || base.bundler,
    namers: mergePipelines(base.namers, ext.namers),
    runtimes: mergeMaps(base.runtimes, ext.runtimes),
    packagers: mergeMaps(base.packagers, ext.packagers),
    optimizers: mergeMaps(base.optimizers, ext.optimizers, mergePipelines),
    reporters: mergePipelines(base.reporters, ext.reporters)
  }, base.packageManager);
}

function mergePipelines(base, ext) {
  if (!ext) {
    return base || [];
  }

  if (base) {
    // Merge the base pipeline if a rest element is defined
    let spreadIndex = ext.indexOf('...');

    if (spreadIndex >= 0) {
      if (ext.filter(v => v === '...').length > 1) {
        throw new Error('Only one spread element can be included in a config pipeline');
      }

      ext = [...ext.slice(0, spreadIndex), ...(base || []), ...ext.slice(spreadIndex + 1)];
    }
  }

  return ext;
}

function mergeMaps(base, ext, merger) {
  if (!ext) {
    return base || {};
  }

  if (!base) {
    return ext;
  } // Add the extension options first so they have higher precedence in the output glob map


  let res = {};

  for (let k in ext) {
    // Flow doesn't correctly infer the type. See https://github.com/facebook/flow/issues/1736.
    let key = k;
    res[key] = merger && base[key] ? merger(base[key], ext[key]) : ext[key];
  } // Add base options that aren't defined in the extension


  for (let k in base) {
    let key = k;

    if (!res[key]) {
      res[key] = base[key];
    }
  }

  return res;
}